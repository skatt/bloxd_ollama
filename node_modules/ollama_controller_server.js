// ollama_controller_server.js
// --------------------------------------
// 🔧 SETUP & USAGE INSTRUCTIONS:
//
// 🔹 Prerequisites:
//   - Install Node.js from https://nodejs.org/
//   - Install and run Ollama backend from https://ollama.com
//     → After installing, start the Ollama server:
//       $ ollama serve
//
// 🔹 Installation:
//   1. Save this file as ollama_controller_server.js
//   2. Open terminal in this file's directory
//   3. Run: npm install express cors body-parser ollama dotenv
//
// 🔹 Configuration:
//   4. Create a .env file in the project root with:
//        AUTH_TOKEN=your-secret-token
//        PORT=11434
//
// 🔹 Running the server:
//   5. Start the server with:
//      node ollama_controller_server.js
//
// 🔹 Remote Access:
//   6. Install ngrok (if needed): npm install -g ngrok
//   7. Expose the local server with:
//      ngrok http 11434
//      → You’ll get a URL like https://a1b2c3d4e5.ngrok.io
//
// 🔹 Bloxd Integration:
//   8. In your Bloxd game JavaScript:
//      - Send a POST request to https://your-tunnel-url/chat
//      - Include the following payload:
//        {
//          token: "your-secret-token",
//          instruction: "System prompt describing role of AI",
//          message: "Optional player input",
//          state: { ...game context... }
//        }
//      - Expect a response in the form:
//        {
//          action: "move", args: { direction: "north", speed: 2 }
//        }
//
// 🔹 Test Example (from command line):
// curl -X POST https://your-ngrok-url/chat \
//   -H "Content-Type: application/json" \
//   -d '{
//         "token": "your-secret-token",
//         "instruction": "Return a JSON action to greet.",
//         "message": "say hello",
//         "state": {}
//       }'
//
// ✅ This server:
// - Accepts structured commands and game state
// - Uses Ollama to compute a response from a system prompt
// - Parses and returns JSON in the form { action, args }
// - Can be safely exposed remotely with a shared token check
// --------------------------------------

require('dotenv').config();

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const ollama = require('ollama');

const app = express();
const PORT = process.env.PORT || 11434;
const AUTH_TOKEN = process.env.AUTH_TOKEN || 'my-secret-token';

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Logger middleware for monitoring all requests
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// 🧰 Ensures a safe {action, args} JSON response
function safeActionResponse(data) {
  if (!data || typeof data !== 'object') return { action: 'idle', args: {} };
  const { action, args } = data;
  if (typeof action !== 'string') return { action: 'idle', args: {} };
  return { action, args: typeof args === 'object' ? args : {} };
}

// POST /chat endpoint
// 🔽 Accepts: { token, instruction, message?, state }
// 🔼 Responds: { action, args }
app.post('/chat', async (req, res) => {
  const { token, instruction, message = '', state = {} } = req.body;

  // 🔐 Require shared token
  if (!token || token !== AUTH_TOKEN) {
    return res.status(401).json({ error: 'Unauthorized: Invalid token.' });
  }

  if (!instruction) {
    return res.status(400).json({ error: 'Missing instruction.' });
  }

  try {
    const chatPrompt = [
      { role: 'system', content: instruction },
      { role: 'user', content: JSON.stringify({ message, state }, null, 2) }
    ];

    const response = await ollama.chat({
      model: 'llama3', // 🔁 Change to any installed model
      messages: chatPrompt,
      stream: false
    });

    // 🧠 Attempt to extract a valid JSON object from the response
    let actionObj = {};
    try {
      const jsonStart = response.message.content.indexOf('{');
      const jsonEnd = response.message.content.lastIndexOf('}');
      const rawJson = response.message.content.slice(jsonStart, jsonEnd + 1);
      actionObj = JSON.parse(rawJson);
    } catch (e) {
      console.warn('Response JSON parse failed:', e);
    }

    res.json(safeActionResponse(actionObj));

  } catch (err) {
    console.error('Ollama chat failed:', err);
    res.status(500).json({ error: 'Failed to contact Ollama.' });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`🚀 Ollama Controller Server running at http://localhost:${PORT}`);
  console.log(`🔐 Protected with token: ${AUTH_TOKEN}`);
});