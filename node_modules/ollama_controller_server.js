
// --------------------------------------
// 🎮 WebSocket Proxy Server for Bloxd.io + Ollama (JSON Mode)

const WebSocket = require('ws');
const http = require('http');
const ollama = require('ollama');

const REMOTE_BLOXD_WS = 'wss://game.bloxd.io/socket.io/?EIO=4&transport=websocket';
const OLLAMA_MODEL = 'llama3';
const PORT = 4999;
const VALID_TOKEN = 'your-secret-token';

const server = http.createServer();
const wss = new WebSocket.Server({ server });

wss.on('connection', function connection(browserWs) {
  const gameWs = new WebSocket(REMOTE_BLOXD_WS);

  // 🔄 Forward game -> browser
  gameWs.on('message', (data) => {
    if (browserWs.readyState === WebSocket.OPEN) {
      browserWs.send(data);
    }
  });

  // 🔄 Forward browser -> game with AI hook
  browserWs.on('message', async (data) => {
    try {
      const str = data.toString();

      // Check if the message is a structured ollama command
      const parsed = JSON.parse(str);

      if (parsed?.type === 'ollama_command' && parsed.token === VALID_TOKEN) {
        const { playerId, instruction, message, state } = parsed;

        const chatPrompt = [
          { role: 'system', content: instruction },
          { role: 'user', content: JSON.stringify({ message, state }, null, 2) }
        ];

        const response = await ollama.chat({
          model: OLLAMA_MODEL,
          messages: chatPrompt,
          stream: false
        });

        let actionObj = { action: 'idle', args: {} };
        try {
          const raw = response.message.content;
          const jsonStart = raw.indexOf('{');
          const jsonEnd = raw.lastIndexOf('}');
          actionObj = JSON.parse(raw.slice(jsonStart, jsonEnd + 1));
        } catch (e) {
          console.warn('⚠️ Failed to parse Ollama JSON:', e);
        }

        const reply = {
          type: 'ollama_response',
          playerId,
          action: actionObj.action || 'idle',
          args: typeof actionObj.args === 'object' ? actionObj.args : {}
        };

        if (browserWs.readyState === WebSocket.OPEN) {
          browserWs.send(JSON.stringify(reply));
        }

        return; // ✅ Handled
      }

    } catch (e) {
      // Not a JSON message; proceed to relay it
    }

    // 🔁 Default: forward to game server
    if (gameWs.readyState === WebSocket.OPEN) {
      gameWs.send(data);
    }
  });

  // 🧹 Cleanup
  const cleanup = () => {
    if (gameWs.readyState === WebSocket.OPEN) gameWs.close();
    if (browserWs.readyState === WebSocket.OPEN) browserWs.close();
  };

  browserWs.on('close', cleanup);
  gameWs.on('close', cleanup);
  browserWs.on('error', cleanup);
  gameWs.on('error', cleanup);
});

server.listen(PORT, () => {
  console.log(`🧠 Proxy WebSocket Server running at ws://localhost:${PORT}`);
  console.log(`🌐 Forwarding to: ${REMOTE_BLOXD_WS}`);
});